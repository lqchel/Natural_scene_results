%% get data
Results = importdata('Pooled Results.mat');
Results(:,9) = Results(:,9) - 0.5;
Results(:,9) = Results(:,8).*Results(:,9);
% signal present and absent trial classification

%Find trials that presented N patches -- signal absent for hypo 1
%Find trials that presented N patches -- signal absent for hypo 1
Find_N = Results(:,5) ==1;

% present patch trials -- signal present for hypo 1
Find_CAP = Results(:,4) == 0 & Results(:,5) == 2; 
Find_IAP = Results(:,4) == 1 & Results(:,5) == 3; 

%Congruent trial with Congruent object, and incongruent trial with
%incongruent object -- signal present for hypo 2
Find_Congruent_CP = Results(:,4) == 0 & Results(:,5) == 2 & Results(:,6) == 3;
Find_Incongruent_IP = Results(:,4) == 1 & Results(:,5) == 3 & Results(:,6) == 3;

%Incongruent trial with congruent object, congruent trial with incongruent
%object -- signal absent for hypo 2
Find_Congruent_IP = Results(:,4) == 0 & Results(:,5) == 3 & Results(:,6) == 3;
Find_Incongruent_CP = Results(:,4) == 1 & Results(:,5) == 2 & Results(:,6) == 3;

%% original vs. modified

%congruent
delta_1 = zeros(80,2);
for img = 3:82
    delta_1(img-2,1) = median(Results(Results(:,2)==img & Find_Congruent_CP,9)-Results(Results(:,2)==img & Find_Congruent_IP,9));
    delta_1(img-2,2) = img;
end

%incongruent

delta_2 = zeros(80,2);
for img = 3:82
    delta_2(img-2,1) = median(Results(Results(:,2)==img & Find_Incongruent_IP,9)-Results(Results(:,2)==img & Find_Incongruent_CP,9));
    delta_2(img-2,2) = img;
end

[delta_1_x,rank1] = sort(delta_1(:,1),'descend');
[delta_2_x,rank2] = sort(delta_2(:,1),'descend');

%% present vs.null
d = importdata('FourOrFive.mat');
delta_3 = zeros(80,2);
loc_even = [2 4 6 8];
loc_odd = [1 3 5 7 9];

for img = 3:82
    
if d(img-2) == 0
    for loc1 = 1:4
        present = Results(Results(:,2)==img & Results(:,5) ~= 1 & Results(:,7) == loc_even(loc1),9);
        if sum(Results(:,2)==img & Find_N & Results(:,7) == loc_even(loc1)) ~= 0
            null = Results(Results(:,2)==img & Find_N & Results(:,7) == loc_even(loc1),9);
            for i = 1:size(null,1)
                dc_diff(i) = median(present) - null(i,:);
            end
        else
            loc1 = loc1+1;
        end   
        
    end
    delta_3(img-2,1) = median(dc_diff); 
    delta_3(img-2,2) = img;
else
    for loc2 = 1:5
        present = Results(Results(:,2)==img & Results(:,5) ~= 1 & Results(:,7) == loc_odd(loc2),9);
        if sum(Results(:,2)==img & Find_N & Results(:,7) == loc_odd(loc2)) ~= 0
            null = Results(Results(:,2)==img & Find_N & Results(:,7) == loc_odd(loc2),9);
            for a = 1:size(null,1)
                dc_diff(a) = median(present) - null(a,:);
            end
        else
            loc2 = loc2+1;
        end   
        
    end
    delta_3(img-2,1) = median(dc_diff); 
    delta_3(img-2,2) = img;
    
end
clear present
clear null

end

%% plotting
colours = cbrewer('qual', 'Set1', 8);
[Y1,edges] = histcounts(delta_1(:,1),80);
Y1_cumulative  = cumsum(Y1);
subplot(2,1,1),plot(edges,[Y1_cumulative 80],'LineWidth',1.2,'Color',colours(2,:),'');
hold on

[Y2,edges] = histcounts(delta_2(:,1),80);
Y2_cumulative  = cumsum(Y2);
plot(edges,[Y2_cumulative 80],'LineWidth',1.2,'Color',colours(1,:));

hold off

xlabel('Original DxC - Modified DxC'), ylabel('Cumulative counts');
set(gca,'FontName','Arial','FontSize',12);
xlim([-7 7]);
legend({'Congruent','Incongruent'},'Box','off');

[Y3,edges] = histcounts(delta_3(:,1),80);
Y3_cumulative  = cumsum(Y3);
subplot(2,1,2),plot(edges,[Y3_cumulative 80],'LineWidth',1.2,'Color','magenta','Box','off');

xlabel('Present DxC - Null DxC'), ylabel('Cumulative counts');
set(gca,'FontName','Arial','FontSize',12);
xlim([-7 7]);


